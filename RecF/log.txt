8. Output with a parameter of 10000000 was
Count should be 100000000
Count is        100000000

9. Output with a parameter of 10000000 was
Count should be 100000000
Count is        12956493

Without the mutex lock, the valued stored in the static count is being overwritten by other threads.

10. Output with a parameter of 10000000 was
Count should be 100000000
Count is        12886693

Having the computation done with temp does not prevent count from being overwritten by other threads.

11. Output with a parameter of 10000000 was
Count should be 100000000
Count is        100000000

Reinserting the mutex locks stops the overwriting.

14. Over a total of 5 runs with a parameter of 10000000, the time taken averaged around 11,669,000 microseconds.

15. Over a total of 5 runs with a parameter of 10000000, the time taken averaged around 1,526,000 microseconds. As such a call to the mutex lock and unlock consumes approximately 10,000,000 microseconds for the calls. Taking into account that the parameter was 10,000,000 this means that a single set of lock and unlock costs 1 microsecond.

16. Though necessary to ensure accurate results from multithreaded programs, synchronization has a high cost to it. The goal of a multithreaded application however is to be faster than its singlethread implementation, so this overhead is acceptable so long as it is less than the gain of the threads.
